{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx"],"names":["Categories","categoryState","atom","key","default","TO_DO","categoriesState","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","ToDos","useRecoilValue","setToDos","useSetRecoilState","useForm","register","handleSubmit","setValue","localStorage","setItem","JSON","stringify","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","onClick","event","targetIndex","findIndex","newToDo","slice","DOING","name","DONE","ToDoList","AddCategories","setAddCategories","useRecoilState","setCategory","console","log","Addcategories","oldcate","value","onInput","currentTarget","map","AddCategory","GlobalStyle","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f614f391.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport enum Categories {\n  \"TO_DO\" = \"TO_DO\",\n  \"DOING\" = \"DOING\",\n  \"DONE\" = \"DONE\",\n}\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: Categories;\n}\nexport interface ICate {\n  text: string;\n}\n\nexport const categoryState = atom<Categories>({\n  key: \"category\",\n  default: Categories.TO_DO,\n});\n\nexport const categoriesState = atom<ICate[]>({\n  key: \"Addcategories\",\n  default: [],\n});\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: [],\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const ToDos = useRecoilValue(toDoState);\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category },\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n  localStorage.setItem(\"ToDos\", JSON.stringify(ToDos));\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useSetRecoilState } from \"recoil\";\nimport { Categories, IToDo, toDoState } from \"../atoms\";\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category };\n      return [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n    });\n  };\n  return (\n    <li>\n      <span>{text}</span>\n      {category !== Categories.DOING && (\n        <button name={Categories.DOING} onClick={onClick}>\n          Doing\n        </button>\n      )}\n      {category !== Categories.TO_DO && (\n        <button name={Categories.TO_DO} onClick={onClick}>\n          To Do\n        </button>\n      )}\n      {category !== Categories.DONE && (\n        <button name={Categories.DONE} onClick={onClick}>\n          Done\n        </button>\n      )}\n    </li>\n  );\n}\n\nexport default ToDo;\n","import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport {\n  Categories,\n  categoryState,\n  categoriesState,\n  toDoSelector,\n} from \"../atoms\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\ninterface IForm {\n  Addcategories: string;\n}\n\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const AddCategories = useRecoilValue(categoriesState);\n  const setAddCategories = useSetRecoilState(categoriesState);\n  const [category, setCategory] = useRecoilState(categoryState);\n  const { handleSubmit, register, setValue } = useForm<IForm>();\n  const onValid = ({ Addcategories }: IForm) => {\n    setAddCategories((oldcate) => [{ text: Addcategories }, ...oldcate]);\n    setValue(\"Addcategories\", \"\");\n  };\n  console.log(AddCategories);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n  console.log(toDos);\n  return (\n    <div>\n      <h1>Crate new category</h1>\n      <form onSubmit={handleSubmit(onValid)}>\n        <input {...register(\"Addcategories\")} placeholder=\"Create category\" />\n        <button>Add</button>\n      </form>\n      <h1>To Dos</h1>\n      <hr />\n      <select value={category} onInput={onInput}>\n        <option value={Categories.TO_DO}>To Do</option>\n        <option value={Categories.DOING}>Doing</option>\n        <option value={Categories.DONE}>Done</option>\n        {AddCategories?.map((AddCategory) => {\n          <option value={AddCategory.text}>AddCategory.text</option>;\n        })}\n      </select>\n      <CreateToDo />\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:grey;\n  color:white;\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}